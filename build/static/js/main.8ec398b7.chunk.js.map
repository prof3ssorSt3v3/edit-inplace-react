{"version":3,"sources":["ListItem.js","EditItem.js","List.js","data.js","App.js","reportWebVitals.js","index.js"],"names":["ListItem","item","edit","title","className","data-id","id","onClick","EditItem","save","clearEdit","value","type","onChange","List","data","updateData","useState","colorId","setColorId","editClick","ev","preventDefault","console","log","target","getAttribute","saveClick","obj","Items","map","App","colors","setColors","newList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAEe,SAASA,EAAT,GAAmC,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACvC,OACE,+BACGD,EAAKE,MACN,8BACE,wBAAQC,UAAU,OAAOC,UAASJ,EAAKK,GAAIC,QAASL,EAApD,uBCLO,SAASM,EAAT,GAA8C,IAA1BP,EAAyB,EAAzBA,KAAMQ,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAC7C,OACE,+BACE,uBAAOL,UAASJ,EAAKK,GAAIK,MAAOV,EAAKE,MAAOS,KAAK,OAAOC,SAAUJ,IAClE,8BACE,wBAAQL,UAAU,OAAOG,QAASG,EAAlC,uBCHO,SAASI,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAAc,EAEnBC,mBAAS,IAFU,mBAE1CC,EAF0C,KAEjCC,EAFiC,KAIjD,SAASC,EAAUC,GACjBA,EAAGC,iBACHC,QAAQC,IAAI,gBACZL,EAAWE,EAAGI,OAAOC,aAAa,YAEpC,SAASC,EAAUN,GACjBA,EAAGC,iBACHC,QAAQC,IAAI,gBACZ,IAAII,EAAM,CACRtB,GAAIe,EAAGI,OAAOC,aAAa,WAC3BvB,MAAOkB,EAAGI,OAAOd,OAEnBK,EAAWY,GAGb,SAASlB,EAAUW,GACjBA,EAAGC,iBACHH,EAAW,IAGb,IAAMU,EAAQd,EAAKe,KAAI,SAAC7B,GACtB,OAAIA,EAAKK,KAAOY,EAEZ,cAACV,EAAD,CAEEP,KAAMA,EACNS,UAAWA,EACXD,KAAMkB,GAHD1B,EAAKK,IAOP,cAACN,EAAD,CAAwBC,KAAMA,EAAMC,KAAMkB,GAA3BnB,EAAKK,OAI/B,OAAO,oBAAIF,UAAU,SAAd,SAAwByB,ICzCjC,IAAMd,EAAO,CACX,CAAET,GAAI,KAAMH,MAAO,QACnB,CAAEG,GAAI,KAAMH,MAAO,SACnB,CAAEG,GAAI,KAAMH,MAAO,QACnB,CAAEG,GAAI,KAAMH,MAAO,aACnB,CAAEG,GAAI,KAAMH,MAAO,UACnB,CAAEG,GAAI,KAAMH,MAAO,WCkBN4B,MAtBf,WAAgB,IAAD,EACed,mBAASF,GADxB,mBACNiB,EADM,KACEC,EADF,KAeb,OACE,qBAAK7B,UAAU,MAAf,SACE,cAACU,EAAD,CAAMC,KAAMiB,EAAQhB,WAdxB,SAAoBY,GAElB,IAAMM,EAAUF,EAAOF,KAAI,SAAC7B,GAC1B,OAAI2B,EAAItB,KAAOL,EAAKK,GACXsB,EAEA3B,KAGXgC,EAAUC,SCJCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8ec398b7.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ListItem({ item, edit }) {\n  return (\n    <li>\n      {item.title}\n      <div>\n        <button className=\"edit\" data-id={item.id} onClick={edit}>\n          Edit\n        </button>\n      </div>\n    </li>\n  );\n}\n","import React from 'react';\n\nexport default function EditItem({ item, save, clearEdit }) {\n  return (\n    <li>\n      <input data-id={item.id} value={item.title} type=\"text\" onChange={save} />\n      <div>\n        <button className=\"save\" onClick={clearEdit}>\n          Save\n        </button>\n      </div>\n    </li>\n  );\n}\n","import ListItem from './ListItem';\nimport EditItem from './EditItem';\nimport { useState } from 'react';\n\nexport default function List({ data, updateData }) {\n  //the list will hold the data in state\n  const [colorId, setColorId] = useState('');\n\n  function editClick(ev) {\n    ev.preventDefault();\n    console.log('clicked edit');\n    setColorId(ev.target.getAttribute('data-id'));\n  }\n  function saveClick(ev) {\n    ev.preventDefault();\n    console.log('clicked save');\n    let obj = {\n      id: ev.target.getAttribute('data-id'),\n      title: ev.target.value,\n    };\n    updateData(obj);\n  }\n\n  function clearEdit(ev) {\n    ev.preventDefault();\n    setColorId('');\n  }\n\n  const Items = data.map((item) => {\n    if (item.id === colorId) {\n      return (\n        <EditItem\n          key={item.id}\n          item={item}\n          clearEdit={clearEdit}\n          save={saveClick}\n        />\n      );\n    } else {\n      return <ListItem key={item.id} item={item} edit={editClick} />;\n    }\n  });\n\n  return <ul className=\"mylist\">{Items}</ul>;\n}\n","//This is my data for the list\n\nconst data = [\n  { id: '1a', title: 'Blue' },\n  { id: '2a', title: 'Green' },\n  { id: '2c', title: 'Gold' },\n  { id: '3f', title: 'Chartruce' },\n  { id: '4a', title: 'Purple' },\n  { id: '5x', title: 'Salmon' },\n];\n\nexport { data };\n","import List from './List';\nimport { data } from './data';\nimport { useState } from 'react';\n\nfunction App() {\n  const [colors, setColors] = useState(data);\n\n  function updateData(obj) {\n    //for editing the list\n    const newList = colors.map((item) => {\n      if (obj.id === item.id) {\n        return obj;\n      } else {\n        return item;\n      }\n    });\n    setColors(newList);\n  }\n\n  return (\n    <div className=\"App\">\n      <List data={colors} updateData={updateData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}